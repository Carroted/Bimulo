const obj = { foo: 'bar', baz: 42 };
const keys = Object.keys(obj);


var blob = new Blob([ `var promises = {};
onmessage = function (event) {
    if (promises[event.data.requestID] !== undefined) {
        promises[event.data.requestID].resolve(event.data.value);
    }
};
var requestID = -1; // we start at -1 so that the first requestID is 0
function createProxy() {
    const handler = {
        get: function (target, prop, receiver) {
                return new Promise((resolve, reject) => {
                    requestID++;
                    promises[requestID] = { resolve, reject };
                    postMessage({
                        type: 'get',
                        key: prop,
                        requestID
                    });
                });
        },
        set: function (target, prop, value, receiver) {
            postMessage({
                type: 'set',
                key: prop,
                value
            });
            return true;
        },
        has: function (target, prop) {
            new Promise((resolve, reject) => {
                requestID++;
                promises[requestID] = { resolve, reject };
                postMessage({
                    type: 'has',
                    key: prop,
                    requestID
                });
            });
            return true;
        }
    };
    return new Proxy({}, handler);
}
const proxy = createProxy();
proxy.foo.then((value) => {
    console.log(value);
    postMessage({
    type: 'log', msg: 'value1 is ' + value
    })
    proxy.foo = 'bar2';
    postMessage({
    type: 'log', msg: 'value2 check time :D'
    })
    proxy.foo.then((value2) => {
        postMessage({
        type: 'log', msg: 'value2 is ' + value2
        });
    });
});

` ], { type: "text/javascript" })
console.log('blobbed')
var worker = new Worker(window.URL.createObjectURL(blob));
 
worker.onmessage = function (event) {
    if (event.data.type === 'get') {
        worker.postMessage({
            type: 'response',
            key: event.data.key,
            value: obj[event.data.key],
            requestID: event.data.requestID // pass it back so it can identify what request it is responding to
        });
    }
    else if (event.data.type === 'set') {
        obj[event.data.key] = event.data.value;
    }
    else if (event.data.type === 'has') {
        worker.postMessage({
            type: 'response',
            key: event.data.key,
            value: obj.hasOwnProperty(event.data.key),
            requestID: event.data.requestID // pass it back so it can identify what request it is responding to
        });
    }
    else if (event.data.type === 'log') {
    console.log(event.data.msg)
    console.log('at this moment in time, value is ' + obj.foo);
    }
};

